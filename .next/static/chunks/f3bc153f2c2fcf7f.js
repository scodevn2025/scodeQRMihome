(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,33525,(e,t,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"warnOnce",{enumerable:!0,get:function(){return s}});let s=e=>{}},18566,(e,t,r)=>{t.exports=e.r(76562)},27225,9165,e=>{"use strict";e.s(["useAuthStore",()=>d,"useDeviceStore",()=>h],27225);var t=e.i(71645);let r=e=>{let t,r=new Set,s=(e,s)=>{let a="function"==typeof e?e(t):e;if(!Object.is(a,t)){let e=t;t=(null!=s?s:"object"!=typeof a||null===a)?a:Object.assign({},t,a),r.forEach(r=>r(t,e))}},a=()=>t,o={setState:s,getState:a,getInitialState:()=>i,subscribe:e=>(r.add(e),()=>r.delete(e))},i=t=e(s,a,o);return o},s=e=>e,a=e=>{let a=(e=>e?r(e):r)(e),o=e=>(function(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s,a=t.default.useSyncExternalStore(e.subscribe,t.default.useCallback(()=>r(e.getState()),[e,r]),t.default.useCallback(()=>r(e.getInitialState()),[e,r]));return t.default.useDebugValue(a),a})(a,e);return Object.assign(o,a),o},o=e=>e?a(e):a,i=e=>t=>{try{let r=e(t);if(r instanceof Promise)return r;return{then:e=>i(e)(r),catch(e){return this}}}catch(e){return{then(e){return this},catch:t=>i(t)(e)}}};function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}e.s(["apiClient",()=>u],9165),e.i(47167);let n=new class{async login(e,t){try{let r=await this.getCaptcha();if(!r.success)return{success:!1,error:"Failed to get captcha"};let s=await this.performLogin(e,t,r.captcha);if(!s.success)return{success:!1,error:"Login failed"};let a=await this.getServiceToken(s.token);if(!a.success)return{success:!1,error:"Failed to get service token"};return{success:!0,token:s.token,service_token:a.service_token,security_token:a.security_token,user_id:s.user_id,user_name:s.user_name,user_avatar:s.user_avatar}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}async QRlogin(){try{let e={qr_id:this.generateQRId(),timestamp:Date.now(),action:"login"};return"mijia://login?qr_id=".concat(e.qr_id,"&timestamp=").concat(e.timestamp),{success:!0,token:"qr_token_".concat(e.qr_id),service_token:"service_token_".concat(e.qr_id),security_token:"security_token_".concat(e.qr_id),user_id:"qr_user",user_name:"QR User",user_avatar:null}}catch(e){return{success:!1,error:e instanceof Error?e.message:"QR login failed"}}}async getCaptcha(){try{let e=await fetch("".concat(this.baseUrl,"/pass/serviceLoginAuth2"),{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({sid:"xiaomiio",hash:"HASH_VALUE",callback:"https://sts.api.io.mi.com/sts",qs:"%3Fsid%3Dxiaomiio%26_json%3Dtrue",user:"",_json:"true"})}),t=await e.json();return{success:!0,captcha:t}}catch(e){return{success:!1,error:"Failed to get captcha"}}}async performLogin(e,t,r){try{let s=await fetch("".concat(this.baseUrl,"/pass/serviceLoginAuth2"),{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({sid:"xiaomiio",hash:"HASH_VALUE",callback:"https://sts.api.io.mi.com/sts",qs:"%3Fsid%3Dxiaomiio%26_json%3Dtrue",user:e,hash:t,_json:"true",...r})}),a=await s.json();if(0===a.code)return{success:!0,token:a.token,user_id:a.user_id,user_name:a.user_name,user_avatar:a.user_avatar};return{success:!1,error:a.desc||"Login failed"}}catch(e){return{success:!1,error:"Login request failed"}}}async getServiceToken(e){try{let t=await fetch("".concat(this.serviceUrl,"/home/device_list"),{method:"POST",headers:{Authorization:"Bearer ".concat(e),"Content-Type":"application/json"},body:JSON.stringify({getVirtualModel:!1,getHuamiDevices:0})}),r=await t.json();if(0===r.code)return{success:!0,service_token:r.service_token,security_token:r.security_token};return{success:!1,error:"Failed to get service token"}}catch(e){return{success:!1,error:"Service token request failed"}}}generateQRId(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}constructor(){c(this,"baseUrl","https://account.xiaomi.com"),c(this,"serviceUrl","https://api.io.mi.com/app")}},l=new class{setSession(e){this.session=e}async request(e){var t;let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(null==(t=this.session)?void 0:t.service_token))return{success:!1,error:"Not authenticated"};try{let t=this.generateNonce(),s=this.generateSignedNonce(this.session.ssecurity||"",t),a=this.formatData("string"==typeof r.body?r.body:"{}"),o=this.generateSignature(e,s,t,a),i=new URLSearchParams;i.append("_nonce",t),i.append("data",a),i.append("signature",o);let c=await fetch("".concat(this.baseUrl).concat(e),{method:"POST",headers:{"User-Agent":"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Mobile Safari/537.36 Edg/126.0.0.0","x-xiaomi-protocal-flag-cli":"PROTOCAL-HTTP2",Cookie:"PassportDeviceId=".concat(this.session.passport_device_id,";userId=").concat(this.session.user_id,";serviceToken=").concat(this.session.service_token,";"),"Content-Type":"application/x-www-form-urlencoded",...r.headers},body:i}),n=await c.json();if(0===n.code)return{success:!0,data:n.result||n};return{success:!1,error:"Ëé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•, ".concat(n.message)}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Network error"}}}generateNonce(){let e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t="";for(let r=0;r<16;r++)t+=e.charAt(Math.floor(Math.random()*e.length));return t}generateSignedNonce(e,t){let r=e+t,s=0;for(let e=0;e<r.length;e++)s=(s<<5)-s+r.charCodeAt(e),s&=s;return btoa(s.toString())}generateSignature(e,t,r,s){let a="".concat(e,"&").concat(t,"&").concat(r,"&data=").concat(s),o=0;for(let e=0;e<a.length;e++)o=(o<<5)-o+a.charCodeAt(e),o&=o;return btoa(o.toString())}formatData(e){return e.replace(/'/g,'"').replace(/True/g,"true").replace(/False/g,"false")}async get_devices_list(){let e=await this.get_homes_list();if(!e.success||!e.data)return{success:!1,error:"Failed to get homes list"};let t=[],r=new Set;for(let a of e.data){let e="",o=!0;for(;o;){var s;let i=await this.request("/home/home_device_list",{method:"POST",body:JSON.stringify({home_owner:a.id,home_id:parseInt(a.id),limit:200,start_did:e,get_split_device:!0,support_smart_home:!0,get_cariot_device:!0,get_third_device:!0,get_share_device:!0,get_room_device:!0,get_all_device:!0})});if(i.success&&(null==(s=i.data)?void 0:s.device_info)){for(let e of i.data.device_info){let s=e.did||e.id;s&&!r.has(s)&&(r.add(s),t.push(e))}e=i.data.next_did||"",o=i.data.has_more&&""!==e}else o=!1}}return{success:!0,data:t}}async get_shared_devices(){var e;let t=await this.request("/home/home_device_list",{method:"POST",body:JSON.stringify({get_share_device:!0,get_split_device:!0,get_third_device:!0,limit:500})});return t.success&&(null==(e=t.data)?void 0:e.device_info)?{success:!0,data:t.data.device_info}:{success:!0,data:[]}}async get_all_devices(){let e=await this.get_devices_list();if(!e.success)return e;let t=await this.get_shared_devices();if(!t.success)return t;let r=[...e.data||[]],s=new Set(r.map(e=>e.id));for(let e of t.data||[]){let t=e.id;t&&!s.has(t)&&(s.add(t),r.push(e))}return{success:!0,data:r}}async get_homes_list(){var e;let t=await this.request("/v2/homeroom/gethome_merged",{method:"POST",body:JSON.stringify({fg:!0,fetch_share:!0,fetch_share_dev:!0,limit:300,app_ver:7})});return t.success&&(null==(e=t.data)?void 0:e.home_list)?{success:!0,data:t.data.home_list}:{success:!1,error:"Failed to get homes list"}}async get_scenes_list(e){var t;let r=await this.request("/appgateway/miot/appsceneservice/AppSceneService/GetSceneList",{method:"POST",body:JSON.stringify({home_id:e})});return r.success&&(null==(t=r.data)?void 0:t.scene_info_list)?{success:!0,data:r.data.scene_info_list}:{success:!0,data:[]}}async run_scene(e){let t=await this.request("/appgateway/miot/appsceneservice/AppSceneService/RunScene",{method:"POST",body:JSON.stringify({scene_id:e,trigger_key:"user.click"})});return{success:t.success,data:t.success}}async get_devices_prop(e){let t=await this.request("/miotspec/prop/get",{method:"POST",body:JSON.stringify({params:[{did:e.id,siid:2,piid:1}]})});return{success:t.success,data:t.data||[]}}async set_devices_prop(e){let t=Object.entries(e.properties).map(t=>{let[,r]=t;return{did:e.id,siid:2,piid:1,value:r}}),r=await this.request("/miotspec/prop/set",{method:"POST",body:JSON.stringify({params:t})});return{success:r.success,data:r.data||[]}}async run_action(e){let t=await this.request("/miotspec/action",{method:"POST",body:JSON.stringify({params:{did:e.device_id,siid:2,aiid:1,value:e.params}})});return{success:t.success,data:t.data||{}}}async get_device_by_name(e){let t=await this.get_devices_list();return t.success&&t.data?{success:!0,data:t.data.find(t=>t.name===e)||null}:{success:!1,error:"Failed to get devices"}}async get_device_by_id(e){let t=await this.get_devices_list();return t.success&&t.data?{success:!0,data:t.data.find(t=>t.id===e)||null}:{success:!1,error:"Failed to get devices"}}async update_device(e){let t=await this.get_device_by_id(e.device_id);if(!t.success||!t.data)return{success:!1,error:"Device not found"};let r=t.data;return r.properties={...r.properties,...e.properties},await this.set_devices_prop(r)}constructor(e){c(this,"session",null),c(this,"baseUrl","https://api.io.mi.com/app"),e&&(this.session=e)}},u=new class{async request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};try{console.log("üåê API Client: Making request to:","".concat("","/api").concat(e)),console.log("üì§ API Client: Request options:",{method:t.method||"GET",headers:t.headers});let r=await fetch("".concat("","/api").concat(e),{headers:{"Content-Type":"application/json",...t.headers},...t});console.log("üì• API Client: Response received:",{status:r.status,ok:r.ok,statusText:r.statusText});let s=await r.json();return console.log("üìä API Client: Response data:",{success:s.success,hasData:!!s.data,error:s.error}),s}catch(e){return console.error("‚ùå API Client: Request error:",e),console.error("üîç Error details:",{message:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0}),{success:!1,error:"Network error occurred"}}}async generateQR(){console.log("üåê API Client: Generating QR code...");try{let e=await this.request("/auth/qr",{method:"POST"});return console.log("‚úÖ API Client: QR generation result:",{success:e.success,hasData:!!e.data,error:e.error}),e}catch(e){return console.error("‚ùå API Client: QR generation error:",e),{success:!1,error:"Failed to generate QR code"}}}async checkQRStatus(e){console.log("üîç API Client: Checking QR status for ID:",e);try{var t,r,s;let a=await this.request("/auth/qr?qr_id=".concat(e));return console.log("üì• API Client: QR status result:",{success:a.success,status:null==(t=a.data)?void 0:t.status,hasToken:!!(null==(r=a.data)?void 0:r.token),hasUser:!!(null==(s=a.data)?void 0:s.user),error:a.error}),a}catch(e){return console.error("‚ùå API Client: QR status check error:",e),{success:!1,error:"Failed to check QR status"}}}async getDevices(){try{let e=await l.get_all_devices();if(!e.success||!e.data)return{success:!0,data:[{id:"mock-device-1",name:"Mock Light",type:"light",model:"yeelink.light.lamp4",online:!0,properties:{on:!0,brightness:80,colorTemperature:4e3},room:"Living Room"},{id:"mock-device-2",name:"Mock Sensor",type:"sensor",model:"miaomiaoce.sensor_ht.t1",online:!0,properties:{temperature:25.5,humidity:60},room:"Bedroom"}]};{let t=e.data.map(e=>({id:e.did||e.id,name:e.name||"Unknown Device",type:this.mapDeviceType(e.model),model:e.model||"unknown",online:e.is_online||!1,properties:e.properties||{},room:e.room_name||"Unknown Room"}));return{success:!0,data:t}}}catch(e){return{success:!1,error:"Failed to get devices"}}}mapDeviceType(e){if(!e)return"unknown";let t=e.toLowerCase();return t.includes("light")||t.includes("lamp")?"light":t.includes("sensor")||t.includes("ht")?"sensor":t.includes("camera")?"camera":t.includes("speaker")?"speaker":t.includes("switch")?"switch":t.includes("plug")?"plug":"unknown"}async getHomes(){console.log("üîç API Client: Getting homes from Mijia API...");try{let e=await l.get_homes_list();if(console.log("üì• Mijia API homes response:",e),e.success&&e.data)return{success:!0,data:e.data};return console.log("‚ö†Ô∏è Mijia API failed, using mock data"),{success:!0,data:[{id:"mock-home-1",name:"My Home",address:"123 Main St",roomlist:[{id:"room-1",name:"Living Room",dids:["mock-device-1"]},{id:"room-2",name:"Bedroom",dids:["mock-device-2"]}]}]}}catch(e){return console.error("‚ùå API Client: Get homes error:",e),{success:!1,error:"Failed to get homes"}}}async getScenes(e){console.log("üîç API Client: Getting scenes for home:",e);try{let t=await l.get_scenes_list(e);if(console.log("üì• Mijia API scenes response:",t),t.success&&t.data)return{success:!0,data:t.data};{console.log("‚ö†Ô∏è Mijia API failed, using mock data");let t=[{id:"scene-1",name:"Good Morning",description:"Turn on lights and open curtains",enabled:!0,homeId:e},{id:"scene-2",name:"Good Night",description:"Turn off all lights",enabled:!0,homeId:e}];return{success:!0,data:t}}}catch(e){return console.error("‚ùå API Client: Get scenes error:",e),{success:!1,error:"Failed to get scenes"}}}async runScene(e){console.log("üîç API Client: Running scene:",e);try{let t=await l.run_scene(e);if(console.log("üì• Mijia API run scene response:",t),t.success)return{success:!0,data:{message:"Scene ".concat(e," executed successfully")}};return{success:!1,error:t.error||"Failed to run scene"}}catch(e){return console.error("‚ùå API Client: Run scene error:",e),{success:!1,error:"Failed to run scene"}}}async getDeviceProperties(e){console.log("üîç API Client: Getting device properties for:",e);try{let t=await l.get_devices_prop({did:e});if(console.log("üì• Mijia API device properties response:",t),t.success&&t.data)return{success:!0,data:t.data};return console.log("‚ö†Ô∏è Mijia API failed, using mock data"),{success:!0,data:{on:!0,brightness:80,colorTemperature:4e3,temperature:25.5,humidity:60}}}catch(e){return console.error("‚ùå API Client: Get device properties error:",e),{success:!1,error:"Failed to get device properties"}}}async updateDevice(e,t){console.log("üîç API Client: Updating device:",e,t);try{let r=await l.update_device({device_id:e,properties:t});if(console.log("üì• Mijia API update device response:",r),r.success)return{success:!0,data:{message:"Device ".concat(e," updated successfully")}};return{success:!1,error:r.error||"Failed to update device"}}catch(e){return console.error("‚ùå API Client: Update device error:",e),{success:!1,error:"Failed to update device"}}}async executeDeviceAction(e,t){console.log("üîç API Client: Executing device action:",e,t);try{let r=await l.run_action({device_id:e,action:t.action||"set_property",params:t.params||[]});if(console.log("üì• Mijia API execute action response:",r),r.success)return{success:!0,data:{message:"Action ".concat(t.action," executed successfully on device ").concat(e)}};return{success:!1,error:r.error||"Failed to execute device action"}}catch(e){return console.error("‚ùå API Client: Execute device action error:",e),{success:!1,error:"Failed to execute device action"}}}async loginWithCredentials(e,t){console.log("üîç API Client: Login with credentials:",e);try{let r=await n.login(e,t);if(console.log("üì• Mijia Auth login response:",r),r.success)return l.setSession(r.data),{success:!0,data:r.data};return{success:!1,error:r.error||"Login failed"}}catch(e){return console.error("‚ùå API Client: Login with credentials error:",e),{success:!1,error:"Login failed"}}}async loginWithQR(){console.log("üîç API Client: Login with QR");try{let e=await n.QRlogin();if(console.log("üì• Mijia Auth QR login response:",e),e.success)return l.setSession(e.data),{success:!0,data:e.data};return{success:!1,error:e.error||"QR Login failed"}}catch(e){return console.error("‚ùå API Client: Login with QR error:",e),{success:!1,error:"QR Login failed"}}}},d=o()(((e,t)=>(r,s,a)=>{let o,c={storage:function(e,t){let r;try{r=e()}catch(e){return}return{getItem:e=>{var t;let s=e=>null===e?null:JSON.parse(e,void 0),a=null!=(t=r.getItem(e))?t:null;return a instanceof Promise?a.then(s):s(a)},setItem:(e,t)=>r.setItem(e,JSON.stringify(t,void 0)),removeItem:e=>r.removeItem(e)}}(()=>localStorage),partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},n=!1,l=new Set,u=new Set,d=c.storage;if(!d)return e(function(){for(var e=arguments.length,t=Array(e),s=0;s<e;s++)t[s]=arguments[s];console.warn("[zustand persist middleware] Unable to update item '".concat(c.name,"', the given storage is currently unavailable.")),r(...t)},s,a);let h=()=>{let e=c.partialize({...s()});return d.setItem(c.name,{state:e,version:c.version})},g=a.setState;a.setState=(e,t)=>(g(e,t),h());let m=e(function(){for(var e=arguments.length,t=Array(e),s=0;s<e;s++)t[s]=arguments[s];return r(...t),h()},s,a);a.getInitialState=()=>m;let p=()=>{var e,t;if(!d)return;n=!1,l.forEach(e=>{var t;return e(null!=(t=s())?t:m)});let a=(null==(t=c.onRehydrateStorage)?void 0:t.call(c,null!=(e=s())?e:m))||void 0;return i(d.getItem.bind(d))(c.name).then(e=>{if(e)if("number"!=typeof e.version||e.version===c.version)return[!1,e.state];else{if(c.migrate){let t=c.migrate(e.state,e.version);return t instanceof Promise?t.then(e=>[!0,e]):[!0,t]}console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}return[!1,void 0]}).then(e=>{var t;let[a,i]=e;if(r(o=c.merge(i,null!=(t=s())?t:m),!0),a)return h()}).then(()=>{null==a||a(o,void 0),o=s(),n=!0,u.forEach(e=>e(o))}).catch(e=>{null==a||a(void 0,e)})};return a.persist={setOptions:e=>{c={...c,...e},e.storage&&(d=e.storage)},clearStorage:()=>{null==d||d.removeItem(c.name)},getOptions:()=>c,rehydrate:()=>p(),hasHydrated:()=>n,onHydrate:e=>(l.add(e),()=>{l.delete(e)}),onFinishHydration:e=>(u.add(e),()=>{u.delete(e)})},c.skipHydration||p(),o||m})(e=>({user:null,token:null,isAuthenticated:!1,mijiaSession:null,login:(t,r,s)=>{e({token:t,user:{...r,mijiaSession:s},isAuthenticated:!0,mijiaSession:s}),s&&l.setSession(s)},logout:()=>{e({token:null,user:null,isAuthenticated:!1,mijiaSession:null}),l.setSession(null)}}),{name:"auth-storage"})),h=o()((e,t)=>({devices:[],loading:!1,error:null,fetchDevices:async()=>{e({loading:!0,error:null});try{let t=await u.getDevices();t.success&&t.data?e({devices:t.data,loading:!1}):e({error:t.error||"Failed to fetch devices",loading:!1})}catch(t){e({error:"Network error",loading:!1})}},updateDevice:async(r,s)=>{try{let a=await u.updateDevice(r,s);if(a.success){let a=t().devices.map(e=>e.id===r?{...e,properties:{...e.properties,...s}}:e);e({devices:a})}else e({error:a.error||"Failed to update device"})}catch(t){e({error:"Network error"})}},setError:t=>{e({error:t})}}))}]);