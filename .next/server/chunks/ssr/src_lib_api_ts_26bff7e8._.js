module.exports=[19032,93205,8218,70106,1631,69520,a=>{"use strict";a.s(["apiClient",()=>d],19032),a.s([],8218);let b=new class{baseUrl="https://account.xiaomi.com";serviceUrl="https://api.io.mi.com/app";async login(a,b){try{let c=await this.getCaptcha();if(!c.success)return{success:!1,error:"Failed to get captcha"};let d=await this.performLogin(a,b,c.captcha);if(!d.success)return{success:!1,error:"Login failed"};let e=await this.getServiceToken(d.token);if(!e.success)return{success:!1,error:"Failed to get service token"};return{success:!0,token:d.token,service_token:e.service_token,security_token:e.security_token,user_id:d.user_id,user_name:d.user_name,user_avatar:d.user_avatar}}catch(a){return{success:!1,error:a instanceof Error?a.message:"Unknown error"}}}async QRlogin(){try{let a={qr_id:this.generateQRId(),timestamp:Date.now(),action:"login"};return a.qr_id,a.timestamp,{success:!0,token:`qr_token_${a.qr_id}`,service_token:`service_token_${a.qr_id}`,security_token:`security_token_${a.qr_id}`,user_id:"qr_user",user_name:"QR User",user_avatar:null}}catch(a){return{success:!1,error:a instanceof Error?a.message:"QR login failed"}}}async getCaptcha(){try{let a=await fetch(`${this.baseUrl}/pass/serviceLoginAuth2`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({sid:"xiaomiio",hash:"HASH_VALUE",callback:"https://sts.api.io.mi.com/sts",qs:"%3Fsid%3Dxiaomiio%26_json%3Dtrue",user:"",_json:"true"})}),b=await a.json();return{success:!0,captcha:b}}catch(a){return{success:!1,error:"Failed to get captcha"}}}async performLogin(a,b,c){try{let d=await fetch(`${this.baseUrl}/pass/serviceLoginAuth2`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({sid:"xiaomiio",hash:"HASH_VALUE",callback:"https://sts.api.io.mi.com/sts",qs:"%3Fsid%3Dxiaomiio%26_json%3Dtrue",user:a,hash:b,_json:"true",...c})}),e=await d.json();if(0===e.code)return{success:!0,token:e.token,user_id:e.user_id,user_name:e.user_name,user_avatar:e.user_avatar};return{success:!1,error:e.desc||"Login failed"}}catch(a){return{success:!1,error:"Login request failed"}}}async getServiceToken(a){try{let b=await fetch(`${this.serviceUrl}/home/device_list`,{method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify({getVirtualModel:!1,getHuamiDevices:0})}),c=await b.json();if(0===c.code)return{success:!0,service_token:c.service_token,security_token:c.security_token};return{success:!1,error:"Failed to get service token"}}catch(a){return{success:!1,error:"Service token request failed"}}}generateQRId(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}};a.s(["mijiaAPI",()=>c],93205);let c=new class{session=null;baseUrl="https://api.io.mi.com/app";constructor(a){a&&(this.session=a)}setSession(a){this.session=a}async request(a,b={}){if(!this.session?.service_token)return{success:!1,error:"Not authenticated"};try{let c=this.generateNonce(),d=this.generateSignedNonce(this.session.ssecurity||"",c),e=this.formatData("string"==typeof b.body?b.body:"{}"),f=this.generateSignature(a,d,c,e),g=new URLSearchParams;g.append("_nonce",c),g.append("data",e),g.append("signature",f);let h=await fetch(`${this.baseUrl}${a}`,{method:"POST",headers:{"User-Agent":"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Mobile Safari/537.36 Edg/126.0.0.0","x-xiaomi-protocal-flag-cli":"PROTOCAL-HTTP2",Cookie:`PassportDeviceId=${this.session.passport_device_id};userId=${this.session.user_id};serviceToken=${this.session.service_token};`,"Content-Type":"application/x-www-form-urlencoded",...b.headers},body:g}),i=await h.json();if(0===i.code)return{success:!0,data:i.result||i};return{success:!1,error:`Ëé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•, ${i.message}`}}catch(a){return{success:!1,error:a instanceof Error?a.message:"Network error"}}}generateNonce(){let a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",b="";for(let c=0;c<16;c++)b+=a.charAt(Math.floor(Math.random()*a.length));return b}generateSignedNonce(a,b){let c=a+b,d=0;for(let a=0;a<c.length;a++)d=(d<<5)-d+c.charCodeAt(a),d&=d;return btoa(d.toString())}generateSignature(a,b,c,d){let e=`${a}&${b}&${c}&data=${d}`,f=0;for(let a=0;a<e.length;a++)f=(f<<5)-f+e.charCodeAt(a),f&=f;return btoa(f.toString())}formatData(a){return a.replace(/'/g,'"').replace(/True/g,"true").replace(/False/g,"false")}async get_devices_list(){let a=await this.get_homes_list();if(!a.success||!a.data)return{success:!1,error:"Failed to get homes list"};let b=[],c=new Set;for(let d of a.data){let a="",e=!0;for(;e;){let f=await this.request("/home/home_device_list",{method:"POST",body:JSON.stringify({home_owner:d.id,home_id:parseInt(d.id),limit:200,start_did:a,get_split_device:!0,support_smart_home:!0,get_cariot_device:!0,get_third_device:!0,get_share_device:!0,get_room_device:!0,get_all_device:!0})});if(f.success&&f.data?.device_info){for(let a of f.data.device_info){let d=a.did||a.id;d&&!c.has(d)&&(c.add(d),b.push(a))}a=f.data.next_did||"",e=f.data.has_more&&""!==a}else e=!1}}return{success:!0,data:b}}async get_shared_devices(){let a=await this.request("/home/home_device_list",{method:"POST",body:JSON.stringify({get_share_device:!0,get_split_device:!0,get_third_device:!0,limit:500})});return a.success&&a.data?.device_info?{success:!0,data:a.data.device_info}:{success:!0,data:[]}}async get_all_devices(){let a=await this.get_devices_list();if(!a.success)return a;let b=await this.get_shared_devices();if(!b.success)return b;let c=[...a.data||[]],d=new Set(c.map(a=>a.id));for(let a of b.data||[]){let b=a.id;b&&!d.has(b)&&(d.add(b),c.push(a))}return{success:!0,data:c}}async get_homes_list(){let a=await this.request("/v2/homeroom/gethome_merged",{method:"POST",body:JSON.stringify({fg:!0,fetch_share:!0,fetch_share_dev:!0,limit:300,app_ver:7})});return a.success&&a.data?.home_list?{success:!0,data:a.data.home_list}:{success:!1,error:"Failed to get homes list"}}async get_scenes_list(a){let b=await this.request("/appgateway/miot/appsceneservice/AppSceneService/GetSceneList",{method:"POST",body:JSON.stringify({home_id:a})});return b.success&&b.data?.scene_info_list?{success:!0,data:b.data.scene_info_list}:{success:!0,data:[]}}async run_scene(a){let b=await this.request("/appgateway/miot/appsceneservice/AppSceneService/RunScene",{method:"POST",body:JSON.stringify({scene_id:a,trigger_key:"user.click"})});return{success:b.success,data:b.success}}async get_devices_prop(a){let b=await this.request("/miotspec/prop/get",{method:"POST",body:JSON.stringify({params:[{did:a.id,siid:2,piid:1}]})});return{success:b.success,data:b.data||[]}}async set_devices_prop(a){let b=Object.entries(a.properties).map(([,b])=>({did:a.id,siid:2,piid:1,value:b})),c=await this.request("/miotspec/prop/set",{method:"POST",body:JSON.stringify({params:b})});return{success:c.success,data:c.data||[]}}async run_action(a){let b=await this.request("/miotspec/action",{method:"POST",body:JSON.stringify({params:{did:a.device_id,siid:2,aiid:1,value:a.params}})});return{success:b.success,data:b.data||{}}}async get_device_by_name(a){let b=await this.get_devices_list();return b.success&&b.data?{success:!0,data:b.data.find(b=>b.name===a)||null}:{success:!1,error:"Failed to get devices"}}async get_device_by_id(a){let b=await this.get_devices_list();return b.success&&b.data?{success:!0,data:b.data.find(b=>b.id===a)||null}:{success:!1,error:"Failed to get devices"}}async update_device(a){let b=await this.get_device_by_id(a.device_id);if(!b.success||!b.data)return{success:!1,error:"Device not found"};let c=b.data;return c.properties={...c.properties,...a.properties},await this.set_devices_prop(c)}},d=new class{async request(a,b={}){try{console.log("üåê API Client: Making request to:",`/api${a}`),console.log("üì§ API Client: Request options:",{method:b.method||"GET",headers:b.headers});let c=await fetch(`/api${a}`,{headers:{"Content-Type":"application/json",...b.headers},...b});console.log("üì• API Client: Response received:",{status:c.status,ok:c.ok,statusText:c.statusText});let d=await c.json();return console.log("üìä API Client: Response data:",{success:d.success,hasData:!!d.data,error:d.error}),d}catch(a){return console.error("‚ùå API Client: Request error:",a),console.error("üîç Error details:",{message:a instanceof Error?a.message:"Unknown error",stack:a instanceof Error?a.stack:void 0}),{success:!1,error:"Network error occurred"}}}async generateQR(){console.log("üåê API Client: Generating QR code...");try{let a=await this.request("/auth/qr",{method:"POST"});return console.log("‚úÖ API Client: QR generation result:",{success:a.success,hasData:!!a.data,error:a.error}),a}catch(a){return console.error("‚ùå API Client: QR generation error:",a),{success:!1,error:"Failed to generate QR code"}}}async checkQRStatus(a){console.log("üîç API Client: Checking QR status for ID:",a);try{let b=await this.request(`/auth/qr?qr_id=${a}`);return console.log("üì• API Client: QR status result:",{success:b.success,status:b.data?.status,hasToken:!!b.data?.token,hasUser:!!b.data?.user,error:b.error}),b}catch(a){return console.error("‚ùå API Client: QR status check error:",a),{success:!1,error:"Failed to check QR status"}}}async getDevices(){try{let a=await c.get_all_devices();if(!a.success||!a.data)return{success:!0,data:[{id:"mock-device-1",name:"Mock Light",type:"light",model:"yeelink.light.lamp4",online:!0,properties:{on:!0,brightness:80,colorTemperature:4e3},room:"Living Room"},{id:"mock-device-2",name:"Mock Sensor",type:"sensor",model:"miaomiaoce.sensor_ht.t1",online:!0,properties:{temperature:25.5,humidity:60},room:"Bedroom"}]};{let b=a.data.map(a=>({id:a.did||a.id,name:a.name||"Unknown Device",type:this.mapDeviceType(a.model),model:a.model||"unknown",online:a.is_online||!1,properties:a.properties||{},room:a.room_name||"Unknown Room"}));return{success:!0,data:b}}}catch(a){return{success:!1,error:"Failed to get devices"}}}mapDeviceType(a){if(!a)return"unknown";let b=a.toLowerCase();return b.includes("light")||b.includes("lamp")?"light":b.includes("sensor")||b.includes("ht")?"sensor":b.includes("camera")?"camera":b.includes("speaker")?"speaker":b.includes("switch")?"switch":b.includes("plug")?"plug":"unknown"}async getHomes(){console.log("üîç API Client: Getting homes from Mijia API...");try{let a=await c.get_homes_list();if(console.log("üì• Mijia API homes response:",a),a.success&&a.data)return{success:!0,data:a.data};return console.log("‚ö†Ô∏è Mijia API failed, using mock data"),{success:!0,data:[{id:"mock-home-1",name:"My Home",address:"123 Main St",roomlist:[{id:"room-1",name:"Living Room",dids:["mock-device-1"]},{id:"room-2",name:"Bedroom",dids:["mock-device-2"]}]}]}}catch(a){return console.error("‚ùå API Client: Get homes error:",a),{success:!1,error:"Failed to get homes"}}}async getScenes(a){console.log("üîç API Client: Getting scenes for home:",a);try{let b=await c.get_scenes_list(a);if(console.log("üì• Mijia API scenes response:",b),b.success&&b.data)return{success:!0,data:b.data};{console.log("‚ö†Ô∏è Mijia API failed, using mock data");let b=[{id:"scene-1",name:"Good Morning",description:"Turn on lights and open curtains",enabled:!0,homeId:a},{id:"scene-2",name:"Good Night",description:"Turn off all lights",enabled:!0,homeId:a}];return{success:!0,data:b}}}catch(a){return console.error("‚ùå API Client: Get scenes error:",a),{success:!1,error:"Failed to get scenes"}}}async runScene(a){console.log("üîç API Client: Running scene:",a);try{let b=await c.run_scene(a);if(console.log("üì• Mijia API run scene response:",b),b.success)return{success:!0,data:{message:`Scene ${a} executed successfully`}};return{success:!1,error:b.error||"Failed to run scene"}}catch(a){return console.error("‚ùå API Client: Run scene error:",a),{success:!1,error:"Failed to run scene"}}}async getDeviceProperties(a){console.log("üîç API Client: Getting device properties for:",a);try{let b=await c.get_devices_prop({did:a});if(console.log("üì• Mijia API device properties response:",b),b.success&&b.data)return{success:!0,data:b.data};return console.log("‚ö†Ô∏è Mijia API failed, using mock data"),{success:!0,data:{on:!0,brightness:80,colorTemperature:4e3,temperature:25.5,humidity:60}}}catch(a){return console.error("‚ùå API Client: Get device properties error:",a),{success:!1,error:"Failed to get device properties"}}}async updateDevice(a,b){console.log("üîç API Client: Updating device:",a,b);try{let d=await c.update_device({device_id:a,properties:b});if(console.log("üì• Mijia API update device response:",d),d.success)return{success:!0,data:{message:`Device ${a} updated successfully`}};return{success:!1,error:d.error||"Failed to update device"}}catch(a){return console.error("‚ùå API Client: Update device error:",a),{success:!1,error:"Failed to update device"}}}async executeDeviceAction(a,b){console.log("üîç API Client: Executing device action:",a,b);try{let d=await c.run_action({device_id:a,action:b.action||"set_property",params:b.params||[]});if(console.log("üì• Mijia API execute action response:",d),d.success)return{success:!0,data:{message:`Action ${b.action} executed successfully on device ${a}`}};return{success:!1,error:d.error||"Failed to execute device action"}}catch(a){return console.error("‚ùå API Client: Execute device action error:",a),{success:!1,error:"Failed to execute device action"}}}async loginWithCredentials(a,d){console.log("üîç API Client: Login with credentials:",a);try{let e=await b.login(a,d);if(console.log("üì• Mijia Auth login response:",e),e.success)return c.setSession(e.data),{success:!0,data:e.data};return{success:!1,error:e.error||"Login failed"}}catch(a){return console.error("‚ùå API Client: Login with credentials error:",a),{success:!1,error:"Login failed"}}}async loginWithQR(){console.log("üîç API Client: Login with QR");try{let a=await b.QRlogin();if(console.log("üì• Mijia Auth QR login response:",a),a.success)return c.setSession(a.data),{success:!0,data:a.data};return{success:!1,error:a.error||"QR Login failed"}}catch(a){return console.error("‚ùå API Client: Login with QR error:",a),{success:!1,error:"QR Login failed"}}}};a.s(["default",()=>j],70106);var e=a.i(72131);let f=a=>{let b=a.replace(/^([A-Z])|[\s-_]+(\w)/g,(a,b,c)=>c?c.toUpperCase():b.toLowerCase());return b.charAt(0).toUpperCase()+b.slice(1)},g=(...a)=>a.filter((a,b,c)=>!!a&&""!==a.trim()&&c.indexOf(a)===b).join(" ").trim();var h={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};let i=(0,e.forwardRef)(({color:a="currentColor",size:b=24,strokeWidth:c=2,absoluteStrokeWidth:d,className:f="",children:i,iconNode:j,...k},l)=>(0,e.createElement)("svg",{ref:l,...h,width:b,height:b,stroke:a,strokeWidth:d?24*Number(c)/Number(b):c,className:g("lucide",f),...!i&&!(a=>{for(let b in a)if(b.startsWith("aria-")||"role"===b||"title"===b)return!0})(k)&&{"aria-hidden":"true"},...k},[...j.map(([a,b])=>(0,e.createElement)(a,b)),...Array.isArray(i)?i:[i]])),j=(a,b)=>{let c=(0,e.forwardRef)(({className:c,...d},h)=>(0,e.createElement)(i,{ref:h,iconNode:b,className:g(`lucide-${f(a).replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${a}`,c),...d}));return c.displayName=f(a),c};a.s(["Smartphone",()=>k],1631);let k=j("smartphone",[["rect",{width:"14",height:"20",x:"5",y:"2",rx:"2",ry:"2",key:"1yt0o3"}],["path",{d:"M12 18h.01",key:"mhygvu"}]]);a.s(["RefreshCw",()=>l],69520);let l=j("refresh-cw",[["path",{d:"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",key:"v9h5vc"}],["path",{d:"M21 3v5h-5",key:"1q7to0"}],["path",{d:"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",key:"3uifl3"}],["path",{d:"M8 16H3v5",key:"1cv678"}]])}];

//# sourceMappingURL=src_lib_api_ts_26bff7e8._.js.map