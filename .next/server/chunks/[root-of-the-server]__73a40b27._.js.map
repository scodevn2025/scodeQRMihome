{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/work/scodeQRMihome/scodeQRMihome/src/app/api/auth/qr/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport QRCode from 'qrcode';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Mijia API constants\nconst SID = 'xiaomiio';\nconst MSG_URL = `https://account.xiaomi.com/pass/serviceLogin?sid=${SID}&_json=true`;\nconst QR_URL = 'https://account.xiaomi.com/longPolling/loginUrl';\nconst ACCOUNT_URL = 'https://account.xiaomi.com/pass2/profile/home?bizFlag=&userId=';\nconst DEFAULT_UA = 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Mobile Safari/537.36 Edg/126.0.0.0';\n\n// In-memory storage for QR sessions (in production, use Redis or database)\ninterface QRSession {\n  id: string;\n  status: 'pending' | 'scanned' | 'confirmed' | 'expired';\n  createdAt: number;\n  expiresAt: number;\n  token?: string;\n  user?: {\n    id: string;\n    username: string;\n    avatar?: string | null;\n    accountInfo?: Record<string, unknown>;\n  };\n  deviceId?: string;\n  session?: Record<string, unknown>;\n  loginUrl?: string;\n  lpUrl?: string;\n}\n\nconst qrSessions = new Map<string, QRSession>();\n\n// Clean up expired sessions\nsetInterval(() => {\n  const now = Date.now();\n  for (const [key, session] of qrSessions.entries()) {\n    if (session.expiresAt < now) {\n      qrSessions.delete(key);\n    }\n  }\n}, 60000); // Clean up every minute\n\n// Generate random device ID\nfunction generateDeviceId(): string {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  for (let i = 0; i < 16; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\n// Get index data from Xiaomi\nasync function getIndexData(deviceId: string): Promise<{\n  deviceId: string;\n  qs: string;\n  _sign: string;\n  callback: string;\n  location: string;\n}> {\n  const response = await fetch(MSG_URL, {\n    headers: {\n      'User-Agent': DEFAULT_UA,\n      'Accept': '*/*',\n      'Accept-Encoding': 'gzip, deflate, br, zstd',\n      'Accept-Language': 'zh-CN,zh;q=0.9',\n      'Cookie': `deviceId=${deviceId}; sdkVersion=3.4.1`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to get index data: ${response.status}`);\n  }\n\n  const text = await response.text();\n  console.log('üîç Attempting to get real Xiaomi QR URL...');\n  console.log('üìÑ Index response length:', text.length);\n  console.log('üîç Raw response preview:', text.substring(0, 200));\n  \n  // Parse JSON with proper error handling\n  let retData;\n  try {\n    // Handle different response formats\n    if (text.startsWith('&&&START&&&')) {\n      console.log('üîç JSON match result: Found &&&START&&&');\n      retData = JSON.parse(text.substring(11));\n    } else {\n      console.log('üîç JSON match result: Not found');\n      retData = JSON.parse(text);\n    }\n  } catch (parseError) {\n    console.log('‚ùå Failed to parse JSON response, full response:', text);\n    throw new Error('Failed to parse index response');\n  }\n\n  // Check if the API returned an error\n  if (retData.code !== 0) {\n    console.log('‚ùå Xiaomi API returned error:', {\n      code: retData.code,\n      description: retData.description || retData.desc,\n      result: retData.result\n    });\n    throw new Error(`Xiaomi API error: ${retData.description || retData.desc || 'Unknown error'} (code: ${retData.code})`);\n  }\n  \n  return {\n    deviceId,\n    qs: retData.qs,\n    _sign: retData._sign,\n    callback: retData.callback,\n    location: retData.location\n  };\n}\n\n// Get QR login URL\nasync function getQRLoginUrl(data: {\n  deviceId: string;\n  qs: string;\n  _sign: string;\n  callback: string;\n  location: string;\n}): Promise<{\n  loginUrl: string;\n  lpUrl: string;\n}> {\n  // Parse serviceParam from location URL more carefully\n  let serviceParam = '';\n  try {\n    const url = new URL(data.location);\n    serviceParam = url.searchParams.get('serviceParam') || '';\n  } catch (error) {\n    console.warn('Failed to parse location URL, using empty serviceParam:', error);\n  }\n\n  const params = new URLSearchParams({\n    '_qrsize': '240',\n    'qs': data.qs,\n    'bizDeviceType': '',\n    'callback': data.callback,\n    '_json': 'true',\n    'theme': '',\n    'sid': SID,\n    'needTheme': 'false',\n    'showActiveX': 'false',\n    'serviceParam': serviceParam,\n    '_local': 'zh_CN',\n    '_sign': data._sign,\n    '_dc': Date.now().toString()\n  });\n\n  console.log('QR URL params:', Object.fromEntries(params));\n\n  const response = await fetch(`${QR_URL}?${params}`, {\n    headers: {\n      'User-Agent': DEFAULT_UA,\n      'Accept': '*/*',\n      'Accept-Encoding': 'gzip, deflate, br, zstd',\n      'Accept-Language': 'zh-CN,zh;q=0.9',\n      'Cookie': `deviceId=${data.deviceId}; sdkVersion=3.4.1`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to get QR URL: ${response.status} ${response.statusText}`);\n  }\n\n  const text = await response.text();\n  console.log('QR URL response:', text.substring(0, 200) + '...');\n  \n  let retData;\n  try {\n    retData = JSON.parse(text.substring(11));\n  } catch {\n    console.error('Failed to parse QR response:', text);\n    throw new Error('Invalid response format from QR API');\n  }\n  \n  if (retData.code !== 0) {\n    console.error('QR API error:', retData);\n    throw new Error(`QR URL error: ${retData.desc || 'Unknown error'}`);\n  }\n\n  return {\n    loginUrl: retData.loginUrl,\n    lpUrl: (retData as { lp: string }).lp\n  };\n}\n\nexport async function POST() {\n  try {\n    console.log('üöÄ ===== QR CODE GENERATION START =====');\n    console.log('‚è∞ Timestamp:', new Date().toISOString());\n    \n    const qrId = uuidv4();\n    const deviceId = generateDeviceId();\n    const expiresAt = Date.now() + 5 * 60 * 1000; // 5 minutes\n    \n    console.log('üì± Generated QR ID:', qrId);\n    console.log('üîß Generated Device ID:', deviceId);\n    console.log('‚è≥ Expires at:', new Date(expiresAt).toISOString());\n    \n    let qrData;\n    let isRealAPI = true;\n    \n    try {\n      // Try to get real data from Xiaomi API\n      const indexData = await getIndexData(deviceId);\n      console.log('‚úÖ Index data retrieved:', {\n        qs: indexData.qs?.substring(0, 50) + '...',\n        _sign: indexData._sign?.substring(0, 20) + '...',\n        callback: indexData.callback,\n        location: indexData.location?.substring(0, 50) + '...'\n      });\n      \n      qrData = await getQRLoginUrl(indexData);\n      console.log('‚úÖ QR login URL generated successfully');\n      console.log('üîó Login URL length:', qrData.loginUrl?.length);\n      console.log('üîó LP URL length:', qrData.lpUrl?.length);\n    } catch (error) {\n      console.log('‚ùå Real Xiaomi API failed:', error);\n      console.warn('‚ö†Ô∏è  Falling back to demo mode...');\n      isRealAPI = false;\n      \n      // Fallback to demo QR code\n      const demoLoginUrl = `mijia://login?qr_id=${qrId}&timestamp=${Date.now()}&demo=true`;\n      qrData = {\n        loginUrl: demoLoginUrl,\n        lpUrl: null\n      };\n      console.log('üé≠ Demo QR URL generated:', demoLoginUrl);\n    }\n    \n    // Generate QR code image\n    console.log('üé® Generating QR code image...');\n    const qrUrl = await QRCode.toDataURL(qrData.loginUrl, {\n      width: 256,\n      margin: 2,\n      color: {\n        dark: '#000000',\n        light: '#FFFFFF'\n      }\n    });\n    console.log('‚úÖ QR code image generated, length:', qrUrl.length);\n    \n    // Store session\n    const sessionData: QRSession = {\n      id: qrId,\n      status: 'pending',\n      createdAt: Date.now(),\n      expiresAt,\n      deviceId,\n      loginUrl: qrData.loginUrl,\n      lpUrl: qrData.lpUrl || undefined\n    };\n    \n    qrSessions.set(qrId, sessionData);\n    \n    // If demo mode, auto-confirm after 10 seconds\n    if (!isRealAPI) {\n      console.log('‚úÖ QR code image generated (demo mode), length:', qrUrl.length);\n      console.log('üíæ QR session stored (demo mode)');\n      console.log('üé≠ Setting up demo mode auto-confirm in 10 seconds...');\n      setTimeout(() => {\n        const session = qrSessions.get(qrId);\n        if (session && session.status === 'pending') {\n          console.log('üé≠ Auto-confirming demo QR session:', qrId);\n          session.status = 'confirmed';\n          session.token = `demo_token_${qrId}`;\n          session.user = {\n            id: 'demo_user',\n            username: 'ScodeVN Demo User',\n            avatar: null\n          };\n          qrSessions.set(qrId, session);\n          console.log('‚úÖ Demo session confirmed successfully');\n        }\n      }, 10000);\n    } else {\n      console.log('‚úÖ QR code image generated (real API), length:', qrUrl.length);\n      console.log('üíæ QR session stored (real API)');\n    }\n    \n    const response = {\n      success: true,\n      data: {\n        qrUrl,\n        qrId,\n        expiresAt,\n        loginUrl: qrData.loginUrl,\n        isDemo: !isRealAPI\n      }\n    };\n    \n    console.log('‚úÖ QR generation completed successfully');\n    console.log('üì§ Response data:', {\n      qrId: response.data.qrId,\n      hasQrUrl: !!response.data.qrUrl,\n      hasLoginUrl: !!response.data.loginUrl,\n      isDemo: response.data.isDemo\n    });\n    \n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('‚ùå QR generation error:', error);\n    console.error('üîç Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n    \n    return NextResponse.json({\n      success: false,\n      error: `Failed to generate QR code: ${error instanceof Error ? error.message : 'Unknown error'}`\n    }, { status: 500 });\n  }\n}\n\n// Check QR login status by polling the long polling URL\nasync function checkQRLoginStatus(session: QRSession): Promise<{\n  status: 'pending' | 'confirmed' | 'expired';\n  token?: string;\n  user?: {\n    id: string;\n    username: string;\n    avatar?: string | null;\n    accountInfo?: Record<string, unknown>;\n  };\n  authData?: Record<string, unknown>;\n}> {\n  if (!session.lpUrl) {\n    console.log('üîç No LP URL available for status check');\n    return { status: 'pending' };\n  }\n\n  try {\n    console.log('üîç Checking QR login status via long polling...');\n    console.log('üåê LP URL:', session.lpUrl);\n    \n    const response = await fetch(session.lpUrl, {\n      method: 'GET',\n      headers: {\n        'User-Agent': DEFAULT_UA,\n        'Accept': '*/*',\n        'Accept-Encoding': 'gzip, deflate, br, zstd',\n        'Accept-Language': 'zh-CN,zh;q=0.9',\n        'Cookie': `deviceId=${session.deviceId}; sdkVersion=3.4.1`,\n        'Connection': 'keep-alive'\n      },\n      signal: AbortSignal.timeout(10000) // 10 second timeout\n    });\n\n    console.log('üì• LP Response status:', response.status);\n    console.log('üì• LP Response headers:', Object.fromEntries(response.headers.entries()));\n\n    if (!response.ok) {\n      console.error('‚ùå QR status check failed:', response.status);\n      return { status: 'pending' };\n    }\n\n    const text = await response.text();\n    console.log('üìÑ LP Response text length:', text.length);\n    console.log('üìÑ LP Response text preview:', text.substring(0, 200));\n    \n    // Parse response (remove callback wrapper if present) - same as Python\n    let retData;\n    try {\n      // Python uses ret.text[11:] to remove callback wrapper\n      if (text.startsWith('&&&START&&&')) {\n        retData = JSON.parse(text.substring(11));\n      } else {\n        retData = JSON.parse(text);\n      }\n      console.log('‚úÖ Parsed LP response:', retData);\n    } catch (err) {\n      console.error('‚ùå Failed to parse LP response:', err);\n      console.log('üìÑ Raw response:', text);\n      return { status: 'pending' };\n    }\n    \n    if (retData.code !== 0) {\n      console.error('‚ùå QR login failed:', retData.desc || retData.message);\n      return { status: 'expired' };\n    }\n\n    // Check if login is confirmed - same logic as Python\n    if (retData.userId && retData.ssecurity && retData.location) {\n      console.log('‚úÖ QR login confirmed, getting final auth data...');\n      console.log('üìä Auth data:', {\n        userId: retData.userId,\n        hasSsecurity: !!retData.ssecurity,\n        location: retData.location\n      });\n      \n      // Get final auth data by following the location redirect - same as Python\n      const locationResponse = await fetch(retData.location, {\n        headers: {\n          'User-Agent': DEFAULT_UA,\n          'Accept': '*/*',\n          'Accept-Encoding': 'gzip, deflate, br, zstd',\n          'Accept-Language': 'zh-CN,zh;q=0.9',\n          'Cookie': `deviceId=${session.deviceId}; sdkVersion=3.4.1`\n        }\n      });\n\n      console.log('üì• Final response status:', locationResponse.status);\n      \n      if (!locationResponse.ok) {\n        console.error('‚ùå Final auth request failed:', locationResponse.status);\n        return { status: 'pending' };\n      }\n\n      // Extract cookies from the response - same as Python\n      const cookies = locationResponse.headers.get('set-cookie');\n      console.log('üç™ Final auth cookies:', cookies);\n      \n      const cookieMap: { [key: string]: string } = {};\n      \n      if (cookies) {\n        cookies.split(';').forEach(cookie => {\n          const [key, value] = cookie.trim().split('=');\n          if (key && value) {\n            cookieMap[key] = value;\n          }\n        });\n      }\n      \n      console.log('üîë Extracted tokens:', cookieMap);\n\n      // Get account info\n      let accountInfo: Record<string, unknown> = {};\n      try {\n        const accountResponse = await fetch(`${ACCOUNT_URL}${retData.userId}`, {\n          headers: {\n            'User-Agent': DEFAULT_UA,\n            'Accept': '*/*',\n            'Accept-Encoding': 'gzip, deflate, br, zstd',\n            'Accept-Language': 'zh-CN,zh;q=0.9',\n            'Cookie': `deviceId=${session.deviceId}; sdkVersion=3.4.1`\n          }\n        });\n        \n        if (accountResponse.ok) {\n          const accountText = await accountResponse.text();\n          const accountData = JSON.parse(accountText.substring(11));\n          accountInfo = accountData.data || {};\n        }\n      } catch (error) {\n        console.warn('Failed to get account info:', error);\n      }\n\n      return {\n        status: 'confirmed',\n        token: retData.ssecurity, // Use ssecurity as token - same as Python\n        user: {\n          id: retData.userId,\n          username: (accountInfo.nickname as string) || `User_${retData.userId}`,\n          avatar: (accountInfo.avatar as string) || null,\n          accountInfo\n        },\n        authData: {\n          success: true,\n          userId: retData.userId,\n          ssecurity: retData.ssecurity,\n          deviceId: session.deviceId,\n          service_token: cookieMap.serviceToken,\n          security_token: retData.ssecurity,\n          user_id: retData.userId,\n          device_id: session.deviceId,\n          cUserId: cookieMap.cUserId,\n          expireTime: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days\n        }\n      };\n    }\n\n    console.log('‚è≥ QR login still pending');\n    return { status: 'pending' };\n  } catch (error) {\n    console.error('‚ùå QR login status check error:', error);\n    console.error('üîç Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined\n    });\n    return { status: 'pending' };\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üîç ===== QR STATUS CHECK START =====');\n    console.log('‚è∞ Timestamp:', new Date().toISOString());\n    \n    const { searchParams } = new URL(request.url);\n    const qrId = searchParams.get('qr_id');\n    \n    console.log('üì± Requested QR ID:', qrId);\n    \n    if (!qrId) {\n      console.log('‚ùå No QR ID provided');\n      return NextResponse.json({\n        success: false,\n        error: 'QR ID is required'\n      }, { status: 400 });\n    }\n    \n    const session = qrSessions.get(qrId);\n    console.log('üîç Session found:', !!session);\n    \n    if (!session) {\n      console.log('‚ùå QR session not found');\n      console.log('üìä Current sessions count:', qrSessions.size);\n      return NextResponse.json({\n        success: false,\n        error: 'QR session not found'\n      }, { status: 404 });\n    }\n    \n    // Check if expired\n    const now = Date.now();\n    const isExpired = session.expiresAt < now;\n    console.log('‚è∞ Session expiry check:', {\n      now: new Date(now).toISOString(),\n      expiresAt: new Date(session.expiresAt).toISOString(),\n      isExpired\n    });\n    \n    if (isExpired) {\n      console.log('‚è∞ Session expired, updating status');\n      session.status = 'expired';\n      qrSessions.set(qrId, session);\n      return NextResponse.json({\n        success: true,\n        data: {\n          status: 'expired',\n          token: null,\n          user: null\n        }\n      });\n    }\n\n    // If still pending, check the actual login status\n    if (session.status === 'pending') {\n      console.log('üîç Session is pending, checking login status...');\n      try {\n        const loginStatus = await checkQRLoginStatus(session);\n        console.log('üîç Login status result:', loginStatus);\n        \n        if (loginStatus.status === 'confirmed') {\n          console.log('‚úÖ Login confirmed, updating session');\n          session.status = 'confirmed';\n          session.token = loginStatus.token;\n          session.user = loginStatus.user;\n          qrSessions.set(qrId, session);\n          console.log('üîë Session updated with token and user data');\n        }\n      } catch (error) {\n        console.error('‚ùå Error checking login status:', error);\n      }\n    } else {\n      console.log('üìä Session status is not pending:', session.status);\n    }\n    \n    const response = {\n      success: true,\n      data: {\n        status: session.status,\n        token: session.token,\n        user: session.user\n      }\n    };\n    \n    console.log('‚úÖ QR status check completed:', {\n      qrId,\n      status: response.data.status,\n      hasToken: !!response.data.token,\n      hasUser: !!response.data.user\n    });\n    \n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('‚ùå QR status check error:', error);\n    console.error('üîç Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n    \n    return NextResponse.json({\n      success: false,\n      error: 'Failed to check QR status'\n    }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}